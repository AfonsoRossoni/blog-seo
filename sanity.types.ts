/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  excerpt?: string;
  coverImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  date?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  category?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  tag?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "tag";
  };
};

export type Tag = {
  _id: string;
  _type: "tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  icon?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  description?: string;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  icon?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  description?: string;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type SanityAssistInstructionTask = {
  _type: "sanity.assist.instructionTask";
  path?: string;
  instructionKey?: string;
  started?: string;
  updated?: string;
  info?: string;
};

export type SanityAssistTaskStatus = {
  _type: "sanity.assist.task.status";
  tasks?: Array<{
    _key: string;
  } & SanityAssistInstructionTask>;
};

export type SanityAssistSchemaTypeAnnotations = {
  _type: "sanity.assist.schemaType.annotations";
  title?: string;
  fields?: Array<{
    _key: string;
  } & SanityAssistSchemaTypeField>;
};

export type SanityAssistOutputType = {
  _type: "sanity.assist.output.type";
  type?: string;
};

export type SanityAssistOutputField = {
  _type: "sanity.assist.output.field";
  path?: string;
};

export type SanityAssistInstructionContext = {
  _type: "sanity.assist.instruction.context";
  reference?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "assist.instruction.context";
  };
};

export type AssistInstructionContext = {
  _id: string;
  _type: "assist.instruction.context";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  context?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type SanityAssistInstructionUserInput = {
  _type: "sanity.assist.instruction.userInput";
  message?: string;
  description?: string;
};

export type SanityAssistInstructionPrompt = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  } | {
    _key: string;
  } & SanityAssistInstructionFieldRef | {
    _key: string;
  } & SanityAssistInstructionContext | {
    _key: string;
  } & SanityAssistInstructionUserInput>;
  style?: "normal";
  listItem?: never;
  markDefs?: null;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type SanityAssistInstructionFieldRef = {
  _type: "sanity.assist.instruction.fieldRef";
  path?: string;
};

export type SanityAssistInstruction = {
  _type: "sanity.assist.instruction";
  prompt?: SanityAssistInstructionPrompt;
  icon?: string;
  title?: string;
  userId?: string;
  createdById?: string;
  output?: Array<{
    _key: string;
  } & SanityAssistOutputField | {
    _key: string;
  } & SanityAssistOutputType>;
};

export type SanityAssistSchemaTypeField = {
  _type: "sanity.assist.schemaType.field";
  path?: string;
  instructions?: Array<{
    _key: string;
  } & SanityAssistInstruction>;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Post | Tag | Category | Author | Slug | Settings | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | SanityAssistInstructionTask | SanityAssistTaskStatus | SanityAssistSchemaTypeAnnotations | SanityAssistOutputType | SanityAssistOutputField | SanityAssistInstructionContext | AssistInstructionContext | SanityAssistInstructionUserInput | SanityAssistInstructionPrompt | SanityAssistInstructionFieldRef | SanityAssistInstruction | SanityAssistSchemaTypeField;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: settingsQuery
// Query: *[_type == "settings"][0]
export type SettingsQueryResult = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
} | null;
// Variable: postsQuery
// Query: {    "posts": *[_type == "post" && defined(slug.current)] | order($order desc) [0...$limit] {      content,        _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{"name": coalesce(name, "Anonymous")},  "category": category->{    "title": coalesce(title, "Uncategorized"),    "slug": coalesce(slug.current, "uncategorized")  },  "tag": tag->{    "title": title,    "slug": slug.current,    "icon": icon  }    }  }
export type PostsQueryResult = {
  posts: Array<{
    content: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
    _id: string;
    status: "draft" | "published";
    title: string | "Untitled";
    slug: string | null;
    excerpt: string | null;
    coverImage: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
    date: string;
    author: {
      name: string | "Anonymous";
    } | null;
    category: {
      title: string | "Uncategorized";
      slug: string | "uncategorized";
    } | null;
    tag: {
      title: string | null;
      slug: string | null;
      icon: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      } | null;
    } | null;
  }>;
};
// Variable: categoriesQuery
// Query: *[_type == "category"] | order($order desc) [0...5] {      _id,  name,  description,  title,  icon,  "slug": slug.current,  }
export type CategoriesQueryResult = Array<{
  _id: string;
  name: null;
  description: string | null;
  title: string | null;
  icon: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  slug: string | null;
}>;
// Variable: postQuery
// Query: *[_type == "post" && slug.current == $slug] [0] {    content,      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{"name": coalesce(name, "Anonymous")},  "category": category->{    "title": coalesce(title, "Uncategorized"),    "slug": coalesce(slug.current, "uncategorized")  },  "tag": tag->{    "title": title,    "slug": slug.current,    "icon": icon  }  }
export type PostQueryResult = {
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  date: string;
  author: {
    name: string | "Anonymous";
  } | null;
  category: {
    title: string | "Uncategorized";
    slug: string | "uncategorized";
  } | null;
  tag: {
    title: string | null;
    slug: string | null;
    icon: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
} | null;
// Variable: postsByCategorySlugQuery
// Query: *[_type == "category" && slug.current == $slug] {      _id,  name,  description,  title,  icon,  "slug": slug.current,    "posts": *[_type == "post" && references(^._id)] | order($order desc, _updatedAt desc) [0...5] {      content,        _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{"name": coalesce(name, "Anonymous")},  "category": category->{    "title": coalesce(title, "Uncategorized"),    "slug": coalesce(slug.current, "uncategorized")  },  "tag": tag->{    "title": title,    "slug": slug.current,    "icon": icon  }    }  }[0]
export type PostsByCategorySlugQueryResult = {
  _id: string;
  name: null;
  description: string | null;
  title: string | null;
  icon: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  slug: string | null;
  posts: Array<{
    content: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
    _id: string;
    status: "draft" | "published";
    title: string | "Untitled";
    slug: string | null;
    excerpt: string | null;
    coverImage: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
    date: string;
    author: {
      name: string | "Anonymous";
    } | null;
    category: {
      title: string | "Uncategorized";
      slug: string | "uncategorized";
    } | null;
    tag: {
      title: string | null;
      slug: string | null;
      icon: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      } | null;
    } | null;
  }>;
} | null;
// Variable: postsByTagSlugQuery
// Query: *[_type == "tag" && slug.current == $slug] {      _id,  name,  description,  title,  icon,  "slug": slug.current,    "posts": *[_type == "post" && references(^._id)] | order($order desc, _updatedAt desc) [0...4] {      content,        _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{"name": coalesce(name, "Anonymous")},  "category": category->{    "title": coalesce(title, "Uncategorized"),    "slug": coalesce(slug.current, "uncategorized")  },  "tag": tag->{    "title": title,    "slug": slug.current,    "icon": icon  }    }  }[0]
export type PostsByTagSlugQueryResult = {
  _id: string;
  name: null;
  description: string | null;
  title: string | null;
  icon: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  slug: string | null;
  posts: Array<{
    content: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
    _id: string;
    status: "draft" | "published";
    title: string | "Untitled";
    slug: string | null;
    excerpt: string | null;
    coverImage: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
    date: string;
    author: {
      name: string | "Anonymous";
    } | null;
    category: {
      title: string | "Uncategorized";
      slug: string | "uncategorized";
    } | null;
    tag: {
      title: string | null;
      slug: string | null;
      icon: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      } | null;
    } | null;
  }>;
} | null;
// Variable: allPostsUrlsQuery
// Query: *[_type == "post" && defined(slug.current)] {    "url": "/" + slug.current,    "lastModified": coalesce(_updatedAt, _createdAt)  }
export type AllPostsUrlsQueryResult = Array<{
  url: string | null;
  lastModified: string;
}>;
// Variable: categoryDataBySlugQuery
// Query: *[_type == "category" && slug.current == $slug][0]{    title,    "slug": slug.current  }
export type CategoryDataBySlugQueryResult = {
  title: string | null;
  slug: string | null;
} | null;
// Variable: tagDataBySlugQuery
// Query: *[_type == "tag" && slug.current == $slug][0]{    title,    "slug": slug.current  }
export type TagDataBySlugQueryResult = {
  title: string | null;
  slug: string | null;
} | null;
// Variable: postDataBySlugQuery
// Query: *[_type == "post" && slug.current == $slug][0]{    title,    "category": category->{      title,      "slug": slug.current    }  }
export type PostDataBySlugQueryResult = {
  title: string | null;
  category: {
    title: string | null;
    slug: string | null;
  } | null;
} | null;
// Variable: postSlugs
// Query: *[_type == "post" && defined(slug.current)]{"slug": slug.current}
export type PostSlugsResult = Array<{
  slug: string | null;
}>;
// Variable: categorySlugs
// Query: *[_type == "category" && defined(slug.current)]{"slug": slug.current}
export type CategorySlugsResult = Array<{
  slug: string | null;
}>;
// Variable: tagSlugs
// Query: *[_type == "tag" && defined(slug.current)]{"slug": slug.current}
export type TagSlugsResult = Array<{
  slug: string | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"settings\"][0]": SettingsQueryResult;
    "\n  {\n    \"posts\": *[_type == \"post\" && defined(slug.current)] | order($order desc) [0...$limit] {\n      content,\n      \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{\"name\": coalesce(name, \"Anonymous\")},\n  \"category\": category->{\n    \"title\": coalesce(title, \"Uncategorized\"),\n    \"slug\": coalesce(slug.current, \"uncategorized\")\n  },\n  \"tag\": tag->{\n    \"title\": title,\n    \"slug\": slug.current,\n    \"icon\": icon\n  }\n\n    }\n  }\n": PostsQueryResult;
    "\n  *[_type == \"category\"] | order($order desc) [0...5] {\n    \n  _id,\n  name,\n  description,\n  title,\n  icon,\n  \"slug\": slug.current,\n\n  }\n": CategoriesQueryResult;
    "\n  *[_type == \"post\" && slug.current == $slug] [0] {\n    content,\n    \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{\"name\": coalesce(name, \"Anonymous\")},\n  \"category\": category->{\n    \"title\": coalesce(title, \"Uncategorized\"),\n    \"slug\": coalesce(slug.current, \"uncategorized\")\n  },\n  \"tag\": tag->{\n    \"title\": title,\n    \"slug\": slug.current,\n    \"icon\": icon\n  }\n\n  }\n": PostQueryResult;
    "\n  *[_type == \"category\" && slug.current == $slug] {\n    \n  _id,\n  name,\n  description,\n  title,\n  icon,\n  \"slug\": slug.current,\n\n    \"posts\": *[_type == \"post\" && references(^._id)] | order($order desc, _updatedAt desc) [0...5] {\n      content,\n      \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{\"name\": coalesce(name, \"Anonymous\")},\n  \"category\": category->{\n    \"title\": coalesce(title, \"Uncategorized\"),\n    \"slug\": coalesce(slug.current, \"uncategorized\")\n  },\n  \"tag\": tag->{\n    \"title\": title,\n    \"slug\": slug.current,\n    \"icon\": icon\n  }\n\n    }\n  }[0]\n": PostsByCategorySlugQueryResult;
    "\n  *[_type == \"tag\" && slug.current == $slug] {\n    \n  _id,\n  name,\n  description,\n  title,\n  icon,\n  \"slug\": slug.current,\n\n    \"posts\": *[_type == \"post\" && references(^._id)] | order($order desc, _updatedAt desc) [0...4] {\n      content,\n      \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{\"name\": coalesce(name, \"Anonymous\")},\n  \"category\": category->{\n    \"title\": coalesce(title, \"Uncategorized\"),\n    \"slug\": coalesce(slug.current, \"uncategorized\")\n  },\n  \"tag\": tag->{\n    \"title\": title,\n    \"slug\": slug.current,\n    \"icon\": icon\n  }\n\n    }\n  }[0]\n": PostsByTagSlugQueryResult;
    "\n  *[_type == \"post\" && defined(slug.current)] {\n    \"url\": \"/\" + slug.current,\n    \"lastModified\": coalesce(_updatedAt, _createdAt)\n  }\n": AllPostsUrlsQueryResult;
    "\n  *[_type == \"category\" && slug.current == $slug][0]{\n    title,\n    \"slug\": slug.current\n  }\n": CategoryDataBySlugQueryResult;
    "\n  *[_type == \"tag\" && slug.current == $slug][0]{\n    title,\n    \"slug\": slug.current\n  }\n": TagDataBySlugQueryResult;
    "\n  *[_type == \"post\" && slug.current == $slug][0]{\n    title,\n    \"category\": category->{\n      title,\n      \"slug\": slug.current\n    }\n  }\n": PostDataBySlugQueryResult;
    "*[_type == \"post\" && defined(slug.current)]{\"slug\": slug.current}": PostSlugsResult;
    "*[_type == \"category\" && defined(slug.current)]{\"slug\": slug.current}": CategorySlugsResult;
    "*[_type == \"tag\" && defined(slug.current)]{\"slug\": slug.current}": TagSlugsResult;
  }
}
